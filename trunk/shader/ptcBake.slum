


class ptcBake(slumSurface):
	def ID(self):
		return 112

	def parameters(self):
		return  group( [
			parameter( 1, 						'bakePTC'	, ui=ui.checkbox() ),
			parameter( '<project>/data/<scene>', 		'file' 		),
			parameter( 'world', 				'coordsys'	),

			parameter( 256, 'NumeberOfLayers', min=3, max=256	),
			parameter( 0.0, 	'MinimunHeight', min=-300, max=300	),
			parameter( 55.0, 	'MaximunHeight', min=-300, max=300		),

			parameter( color(1), 'outColor', output=True ), 	   # required for 3delight surface shaders
			parameter( color(0), 'outTransparency', output=True ), # required for 3delight surface shaders
		], name = 'Bake a PTC' )



	def delight(self, node):
		# 3deligth shader parameters
		shaderPars = [
			'string file = "%s";' % node['file'],
			'string coordsys = "%s";' % node['coordsys'],

			'output varying color outColor=0;',
			'output varying color outTransparency=0;'
		]

		# shader code
		# base variables
		code=['''
			extern color Cs;
			outColor = color(0,0,1);
		''']
		
		# use values in meters, instead of centimeters
		minimunHeight = node['MinimunHeight'] * 100
		maximunHeight = node['MaximunHeight'] * 100
		layers 		  = node['NumeberOfLayers']-1
		steps   	  = float(maximunHeight-minimunHeight)/float(layers)

		
		if node['bakePTC']:
			code.append('''
				extern point P;
				extern normal N;
				
				float steps = %f;
				float each=0;
				for(each=0;each<%d;each+=1)
				{
					point p = P;
					float A = area( P, "dicing" );
					point  wp = transform("world",p);
					if(wp[1]>(%f+steps) && wp[1]<%f)
					{
						outColor = color(1,0,0);
					}else{
						outColor = color(0,0,1);
						A=0;
					}
					string fname = format("%%s.%%03d.ptc", file, each);
					bake3d( fname, "", p, N,	"coordsystem", coordsys, "_area", A, "interpolate", 1 );
				}
				
			''' % (steps, layers, minimunHeight, maximunHeight ) )

		# return a tupple
		return (shaderPars, code)

