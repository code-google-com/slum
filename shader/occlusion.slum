#
# occlusion.slum - a simple occlusion slum surface shader to be used by
#				 developers as a template shader.
#
#    Copyright (C) 2008 - Roberto Hradec 
#
# ---------------------------------------------------------------------------
#	 This file is part of SLUM.
#
#    SLUM is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    SLUM is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with SLUM.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------------------------------------------------


class occlusion(slumColor):
    def ID(self):
        '''
            a unique ID that identifys the shader inside slum. If you upload
            this template to a online repository, this method will be replaced
            automatically by the repository server, with the next global available ID.
        '''
        return 1

    def parameters(self):
        '''
            This method defines all the parameter for our shader template. Keep in mind that here you define
            the parameters that the user will see, not necessarily the same parameters of the shaders that this template
            defines.
        '''
        Enable 		= parameter( 1.0, 'Enable', ui=ui.checkbox(), help = 'Enable or disable it.')
        Intensity 	= parameter( 1.0, 'Intensity', help = 'Multiplier for our occlusion.', max = 10, min = 0 )
        Gamma 		= parameter( 1.0, 'Gamma', help = 'a gamma curve to adjust the occlusion output. Very usefull when outputin for film, where you must apply a LUT over your image. You can use this gamma to compensate the attenuation that a LUT causes on the occlusion', max=2.0, min=0 )

        Samples 	= parameter( 16,	'Samples', help = 'Number of ray samples to trace.', max=512 )
        Adaptive 	= parameter( 1.0,	'AdaptiveSampling', ui=ui.checkbox(), help = 'Changes the number of samples depeding on the geometry it finds. if it shoots some samples and finds geometry, it will shoot more samples to refine the result. If it dont find geometry, it will avoid shooting so many samples. Under 64 samples, adaptive is allways off.' )
        MaxDistance = parameter( 100.0, 'MaxDistance', help = 'Max distance to trace rays.',max=1000)
        ConeAngle 	= parameter( 89.0,	'ConeAngle', help = 'Cone area where the shader shoots the rays.', max=90.0, min=0 )
        Bias 		= parameter( 0.01,	'Bias', help = 'A offset bias to avoid geometry to self intersect.' )
        TraceSet 	= parameter( '-', 	'TraceSet', help = '''You can create a maya set with the geometry you want to raytrace. The put the name of that set in here so it will only raytrace against the geometry in the set. You can specify multiple sets using comma. Prefix the set name with '-' to ignore it. The default '-' only makes it use all sets (including defaultObjectSet)''' )

        outType 	= parameter( 0,	'OutputAs', ui=ui.popup({
                                                    'Ambient Occlusion':0,
                                                    'Bent Normal Normalized':1,
                                                    'Bent Normal with AO as Lenght':2,
                                                    'Tangent Bent Normal with AO as Lenght':3,
                                                }), help = 'How to outpu the calculated AO.' )

        OutColor 		= parameter( color(1), 'outColor', output=True ) 		# required for 3delight surface shaders
        OutTransparency = parameter( color(0), 'outTransparency', output=True ) # required for 3delight surface shaders

        return  group( [
            OutColor,
            OutTransparency,
            Enable,
            Intensity,
            Gamma,
            group( [
                Samples,
                Adaptive,
                MaxDistance,
                ConeAngle,
                Bias,
                TraceSet
            ], name = 'Ray Trace Parameters' ),
            group( [
                outType,
            ], name = 'Output Type' )
        ], name = 'Ambient Occlusion' )


    def delight(self, node):
        '''
            delight method is were you define the code for this shader, when rendering in 3delight.
            this is a renderer method. a renderer method should allways return a tupple as:
            ( <list of strings that define the shader parameters>, <list of strings that define the shader code>)
        '''
        # 3deligth shader extra parameters
        shaderPars = []

        # shader code
        code=['''
                extern normal N;
                extern point P;
                float occ = 0;
                vector bn = 0;
                outColor = 0;
            ''']

        if node['Enable']:
            code.append('''
                occ = 1-occlusion( P, normalize(N), Samples,
                    "maxdist", MaxDistance,
                    "coneangle", radians(ConeAngle),
                    "subset", TraceSet,
                    "environmentdir", bn,
                    "label", "occlusion",
                    "bias", Bias,
                    "adaptive", Adaptive
                );
            ''')

        if node['OutputAs'] is 0:
            code.append('outColor = occ;')
        elif node['OutputAs'] is 1:
            code.append('outColor = color(normalize(bn)*0.5+0.5);')
        elif node['OutputAs'] is 2:
            code.append('outColor = color((normalize(bn)*0.5+0.5)*occ);')

        elif node['OutputAs'] is 3:
            code.append('''
                bn = normalize(bn);
                outColor = color((bn*0.5+0.5)*occ);
            ''')

        # return a tupple
        return (shaderPars, code)
